import { ref, computed, type Ref } from 'vue'
import axios, { type AxiosResponse } from 'axios'

interface Currency {
	code: string
	name: string
}

interface ExchangeRateData {
	result: string
	'error-type'?: string
	conversion_rates: Record<string, number>
	time_last_update_utc: string
}

interface CachedRate {
	data: ExchangeRateData
	timestamp: number
}

interface CachedRates {
	[key: string]: CachedRate
}

export function useCurrencyConverter() {
	const amount: Ref<number> = ref(1)
	const fromCurrency: Ref<string> = ref('USD')
	const toCurrency: Ref<string> = ref('EUR')
	const exchangeRate: Ref<number | null> = ref(null)
	const isLoading: Ref<boolean> = ref(false)
	const error: Ref<string | null> = ref(null)
	const lastUpdated: Ref<Date | null> = ref(null)

	const API_KEY: string = '7e4360c7c3083a80f199c37a'
	const API_URL: string = `https://v6.exchangerate-api.com/v6/${API_KEY}/latest/`
	const CACHE_KEY: string = 'currencyExchangeRatesCache'
	const CACHE_EXPIRY: number = 14400000 // 4 —á–∞—Å–∞

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ –∏–∑ localStorage
	const initializeCache = (): CachedRates => {
		const cachedData = localStorage.getItem(CACHE_KEY)
		return cachedData ? JSON.parse(cachedData) : {}
	}

	const cachedRates: Ref<CachedRates> = ref(initializeCache())

	const currencies: Ref<Currency[]> = ref([
		{ code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê' },
		{ code: 'EUR', name: '–ï–≤—Ä–æ' },
		{ code: 'GBP', name: '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤' },
		{ code: 'JPY', name: '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞' },
		{ code: 'CNY', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å' },
		{ code: 'INR', name: '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è' },
		{ code: 'CAD', name: '–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä' },
		{ code: 'AUD', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä' },
		{ code: 'CHF', name: '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫' },
		{ code: 'NZD', name: '–ù–æ–≤–æ–∑–µ–ª–∞–Ω–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä' },
		{ code: 'SEK', name: '–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞' },
		{ code: 'NOK', name: '–ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞' },
		{ code: 'DKK', name: '–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞' },
		{ code: 'SGD', name: '–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä' },
		{ code: 'HKD', name: '–ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä' },
		{ code: 'KRW', name: '–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞' },
		{ code: 'TRY', name: '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞' },
		{ code: 'BRL', name: '–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª' },
		{ code: 'ZAR', name: '–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥' },
		{ code: 'MXN', name: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–µ –ø–µ—Å–æ' },
		{ code: 'RUB', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å' },
		{ code: 'AED', name: '–î–∏—Ä—Ö–∞–º –û–ê–≠' },
		{ code: 'SAR', name: '–°–∞—É–¥–æ–≤—Å–∫–∏–π —Ä–∏—è–ª' },
		{ code: 'THB', name: '–¢–∞–π—Å–∫–∏–π –±–∞—Ç' },
		{ code: 'MYR', name: '–ú–∞–ª–∞–π–∑–∏–π—Å–∫–∏–π —Ä–∏–Ω–≥–≥–∏—Ç' },
		{ code: 'IDR', name: '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è' },
		{ code: 'PHP', name: '–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æ' },
		{ code: 'ILS', name: '–ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —à–µ–∫–µ–ª—å' },
		{ code: 'PLN', name: '–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π' },
		{ code: 'CZK', name: '–ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞' },
		{ code: 'HUF', name: '–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä–∏–Ω—Ç' },
		{ code: 'RON', name: '–†—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π' },
		{ code: 'HRK', name: '–•–æ—Ä–≤–∞—Ç—Å–∫–∞—è –∫—É–Ω–∞' },
		{ code: 'BGN', name: '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ª–µ–≤' },
		{ code: 'ISK', name: '–ò—Å–ª–∞–Ω–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞' },
		{ code: 'UAH', name: '–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞' },
		{ code: 'KZT', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ' },
		{ code: 'BYN', name: '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å' },
		{ code: 'CLP', name: '–ß–∏–ª–∏–π—Å–∫–æ–µ –ø–µ—Å–æ' },
		{ code: 'EGP', name: '–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π —Ñ—É–Ω—Ç' },
		{ code: 'PKR', name: '–ü–∞–∫–∏—Å—Ç–∞–Ω—Å–∫–∞—è —Ä—É–ø–∏—è' },
		{ code: 'BDT', name: '–ë–∞–Ω–≥–ª–∞–¥–µ—à—Å–∫–∞—è —Ç–∞–∫–∞' },
	])

	const convertedAmount = computed<string>(() => {
		if (!exchangeRate.value) return '0'
		return (amount.value * exchangeRate.value).toFixed(2)
	})

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à
	const saveToCache = (currency: string, data: ExchangeRateData) => {
		const cacheEntry: CachedRate = {
			data,
			timestamp: Date.now(),
		}

		cachedRates.value[currency] = cacheEntry
		localStorage.setItem(CACHE_KEY, JSON.stringify(cachedRates.value))
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
	const isCacheValid = (currency: string): boolean => {
		if (!cachedRates.value[currency]) return false

		const cacheAge = Date.now() - cachedRates.value[currency].timestamp
		return cacheAge < CACHE_EXPIRY
	}

	async function fetchExchangeRate(): Promise<void> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–µ—à
		if (cachedRates.value[fromCurrency.value]) {
			const cacheAge =
				Date.now() - cachedRates.value[fromCurrency.value].timestamp
			const cacheValid = cacheAge < CACHE_EXPIRY

			if (cacheValid) {
				console.log(
					`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–µ—à (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.floor(cacheAge / 60000)} –º–∏–Ω.)`,
					cachedRates.value[fromCurrency.value].data
				)
				const cachedData = cachedRates.value[fromCurrency.value].data
				exchangeRate.value = cachedData.conversion_rates[toCurrency.value]
				lastUpdated.value = new Date(cachedData.time_last_update_utc)
				return
			}
		}

		console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å API...')
		isLoading.value = true
		error.value = null

		try {
			const response = await axios.get(`${API_URL}${fromCurrency.value}`)

			if (response.data.result === 'success') {
				console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', response.data)
				saveToCache(fromCurrency.value, response.data)
				exchangeRate.value = response.data.conversion_rates[toCurrency.value]
				lastUpdated.value = new Date(response.data.time_last_update_utc)
			}
		} catch (err) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', err)
		} finally {
			isLoading.value = false
		}
	}

	const audioSwap = ref<HTMLAudioElement | null>(null)

	const playSwap = () => {
		if (!audioSwap.value) {
			audioSwap.value = new Audio('sounds/coins-swoosh.mp3')
			audioSwap.value.load()
		}
		audioSwap.value.currentTime = 0
		audioSwap.value.play()
	}

	function swapCurrencies(): void {
		const temp = fromCurrency.value
		fromCurrency.value = toCurrency.value
		toCurrency.value = temp
		fetchExchangeRate()
		playSwap()
	}

	fetchExchangeRate()

	return {
		amount,
		fromCurrency,
		toCurrency,
		convertedAmount,
		currencies,
		isLoading,
		error,
		lastUpdated,
		fetchExchangeRate,
		swapCurrencies,
	}
}
